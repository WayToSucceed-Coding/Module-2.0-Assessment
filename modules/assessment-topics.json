{
    "moduleName": "Module 2.0",
    "topics": [
        {
            "name": "Functions",
            "description": "Covers functions, parameters, arguments, default arguments, positional and keyword arguments, variable scope (local, global, nonlocal), lambda functions, and advanced functions like map(), filter(), and zip().",
            "mcqs": [
                {
                    "question": "Which of the following calls will cause an error?\n\ndef student_info(name, grade, roll_no):\n    print(name, grade, roll_no)",
                    "options": [
                        "student_info('Ravi', 7, 12)",
                        "student_info(roll_no=12, name='Ravi', grade=7)",
                        "student_info('Ravi', roll_no=12, grade=7)",
                        "student_info('Ravi', 12)"
                    ],
                    "answer": 3,
                    "explanation": "The last call provides only two arguments instead of three required positional arguments."
                },
                {
                    "question": "In Python, what do local, nonlocal, and global variables refer to?",
                    "options": [
                        "local variables are available everywhere, nonlocal variables are inside a function, and global variables are temporary",
                        "local and nonlocal variables mean the same thing, while global variables are permanent",
                        "local variables are inside a function, nonlocal variables are in an enclosing function, and global variables are defined outside all functions",
                        "local variables are outside all functions, nonlocal variables are inside a function, and global variables are deleted after use"
                    ],
                    "answer": 2,
                    "explanation": "local variables exist only inside the function where they are created, nonlocal variables are used in nested functions referring to the nearest enclosing scope, and global variables are defined outside functions and accessible throughout the program."
                },
                {
                    "question": "In Python, what do the functions map(), filter(), and zip() do?",
                    "options": [
                        "map() applies a function to each item, filter() keeps items that meet a condition, and zip() pairs elements from multiple lists",
                        "map() filters items, filter() applies a function, and zip() sorts lists",
                        "map() joins lists, filter() removes duplicates, and zip() reverses lists",
                        "map(), filter(), and zip() all return errors if used together"
                    ],
                    "answer": 0,
                    "explanation": "map() transforms each element with a function, filter() selects elements that satisfy a condition, and zip() combines elements by position into tuples."
                }
            ],
            "codeTasks": [
                {
                    "question": "You need to create a system that applies a bonus to multiple student marks.\n\nSteps:\n1. Create a global variable named `bonus` and assign it the value 5.\n2. Define a function called `process_marks` that takes any number of arguments (`*args`).\n3. Inside `process_marks`, create a variable named `total_bonus` and set it equal to 0.\n4. Still inside `process_marks`, define a nested function called `apply_bonus` that takes one parameter `mark`.\n5. Inside `apply_bonus`, declare `total_bonus` as nonlocal so it can be modified.\n6. Inside `apply_bonus`, increase `total_bonus` by the value of the global variable `bonus`.\n7. Inside `apply_bonus`, return the sum of `mark` and the global variable `bonus`.\n8. After defining `apply_bonus` but inside `process_marks`, call the `map()` function with `apply_bonus` as the first argument and the list of marks (`args`) as the second argument. Store the result in a variable named `new_marks` after converting it into a list.\n9. Return `new_marks` from `process_marks`.\n\nExample: Calling `process_marks(70, 80, 90)` should return `[75, 85, 95]`.",
                    "starterCode": "# Your code here",
                    "expectedOutput": "[75, 85, 95]",
                    "solutionCode": "bonus = 5\n\ndef process_marks(*args):\n    total_bonus = 0\n    def apply_bonus(mark):\n        nonlocal total_bonus\n        total_bonus += bonus\n        return mark + bonus\n    new_marks = list(map(apply_bonus, args))\n    return new_marks",
                    "testCases": [
                        {
                            "mode": "function",
                            "call": {
                                "name": "process_marks",
                                "args": [
                                    70,
                                    80,
                                    90
                                ]
                            },
                            "expectedReturn": [
                                75,
                                85,
                                95
                            ]
                        },
                        {
                            "mode": "function",
                            "call": {
                                "name": "process_marks",
                                "args": [
                                    50,
                                    60
                                ]
                            },
                            "expectedReturn": [
                                55,
                                65
                            ]
                        }
                    ],
                    "structureRequirements": {
                        "functions": [
                            "process_marks",
                            "apply_bonus"
                        ],
                        "mustUseForLoop": false,
                        "mustUseWhileLoop": false,
                        "forbidden": [
                            "eval(",
                            "exec("
                        ]
                    }
                }
            ]
        },
        {
            "name": "Comprehensions",
            "description": "Covers list, set, and dictionary comprehensions, and sorting dictionaries.",
            "mcqs": [
                {
                    "question": "What will be the output of the following code?\n\nnumbers = [1, 2, 3, 4, 5]\neven_numbers = [x for x in numbers if x % 2 == 0]\nprint(even_numbers)",
                    "options": [
                        "[1, 2, 3, 4, 5]",
                        "[2, 4]",
                        "[1, 3, 5]",
                        "Error"
                    ],
                    "answer": 1,
                    "explanation": "Only even numbers (2 and 4) are included in the new list."
                },
                {
                    "question": "Which of the following creates a set of unique vowels from the string 'education'?",
                    "options": [
                        "{char for char in 'education' if char in 'aeiou'}",
                        "[char for char in 'education' if char in 'aeiou']",
                        "(char for char in 'education' if char in 'aeiou')",
                        "set([char for char in 'education' if char in 'aeiou'])"
                    ],
                    "answer": 0,
                    "explanation": "Set comprehension uses curly braces {}. '{char for char in 'education' if char in 'aeiou'}' creates a set of unique vowels from the string."
                },
                {
                    "question": "Given fruits = {'apple':4, 'banana':2, 'orange':6}, how can you get a dictionary with only fruits that have quantity more than 3?",
                    "options": [
                        "{k:v for k,v in fruits.items() if v>3}",
                        "[k:v for k,v in fruits.items() if v>3]",
                        "fruits.keys()",
                        "fruits.values()"
                    ],
                    "answer": 0,
                    "explanation": "Dictionary comprehension allows filtering items by value; only keys with value > 3 are included."
                },
                {
                    "question": "How can you create a dictionary from two lists, one containing keys and the other values?",
                    "options": [
                        "{k:v for k,v in zip(keys, values)}",
                        "[k:v for k,v in zip(keys, values)]",
                        "{keys, values}",
                        "zip(keys, values)"
                    ],
                    "answer": 0,
                    "explanation": "Dictionary comprehension combined with zip() allows mapping each key to its corresponding value."
                }
            ],
            "codeTasks": [
                {
                    "question": "You need to sort a dictionary by its values in descending order.\n\nSteps:\n1. Create a dictionary called 'fruits' with these key-value pairs: 'apple': 4, 'banana': 2, 'orange': 6.\n2. Convert the dictionary into a list of tuples called 'items' using the items() method: items = list(fruits.items()).\n3. Sort the 'items' list in-place using items.sort(key=lambda x: x[1], reverse=True) and store the result in a variable called 'sorted_items'.\n4. Print sorted_items to see the result.\n\nExample: After sorting, sorted_items should be [('orange', 6), ('apple', 4), ('banana', 2)].",
                    "starterCode": "# Step 1: Create the dictionary\n# Step 2: Convert dictionary to list of tuples\n# Step 3: Sort the list in-place and store in 'sorted_items'\n# Step 4: Print 'sorted_items'",
                    "expectedOutput": "[['orange', 6], ['apple', 4], ['banana', 2]]",
                    "solutionCode": "fruits = {'apple': 4, 'banana': 2, 'orange': 6}\nitems = list(fruits.items())\nitems.sort(key=lambda x: x[1], reverse=True)\nsorted_items = items\nprint(sorted_items)",
                    "testCases": [
                        {
                            "mode": "function",
                            "call": {
                                "name": "sorted_items",
                                "args": []
                            },
                            "expectedReturn": [
                                [
                                    "orange",
                                    6
                                ],
                                [
                                    "apple",
                                    4
                                ],
                                [
                                    "banana",
                                    2
                                ]
                            ]
                        }
                    ],
                    "structureRequirements": {
                        "functions": [],
                        "mustUseForLoop": false,
                        "mustUseWhileLoop": false,
                        "forbidden": [
                            "eval(",
                            "exec("
                        ]
                    }
                }
            ]
        },
        {
            "name": "Object-Oriented Programming",
            "description": "",
            "mcqs": [
                {
                    "question": "Which of the following best describes a class in Python?",
                    "options": [
                        "A variable storing data",
                        "A function inside an object",
                        "A specific object created from a template",
                        "A template that defines properties and behaviors"
                    ],
                    "answer": 3,
                    "explanation": "A class acts as a template that defines the common attributes and methods for all objects created from it."
                },
                {
                    "question": "What is an object in Python?",
                    "options": [
                        "A variable storing a method",
                        "A function inside a class",
                        "An instance of a class",
                        "A template for creating classes"
                    ],
                    "answer": 2,
                    "explanation": "An object is an instance of a class with its own set of attribute values."
                },
                {
                    "question": "What is the purpose of the __init__() method in a class?",
                    "options": [
                        "It deletes an object when it is no longer needed",
                        "It defines a class-level variable",
                        "It initializes object attributes when the object is created",
                        "It converts a class into a function"
                    ],
                    "answer": 2,
                    "explanation": "__init__() is called automatically when an object is created, allowing initialization of the object's attributes."
                },
                {
                    "question": "In a class method, what does the self parameter represent?",
                    "options": [
                        "A local function inside the class",
                        "The current object that calls the method",
                        "A global variable",
                        "The class itself"
                    ],
                    "answer": 1,
                    "explanation": "self represents the specific object calling the method, allowing access to its attributes and other methods."
                },
                {
                    "question": "What does polymorphism mean in Python?",
                    "options": [
                        "Restricting functions to only one type of input",
                        "Creating multiple copies of an object",
                        "A single object type has only one form",
                        "When a function or operator behaves differently depending on the type of object"
                    ],
                    "answer": 3,
                    "explanation": "Polymorphism in Python allows functions and operators to behave differently depending on the object type. For example, + adds numbers but concatenates strings, and len() works on strings, lists, and dictionaries."
                },
                {
                    "question": "What does inheritance in Python allow you to do?",
                    "options": [
                        "Restrict a class to use only one attribute",
                        "Create multiple copies of the same object",
                        "Prevent method overriding",
                        "Allow a child class to reuse attributes and methods from a parent class"
                    ],
                    "answer": 3,
                    "explanation": "Inheritance allows a child class to reuse attributes and methods from a parent class, avoiding code duplication."
                },
                {
                    "question": "What is encapsulation in object-oriented programming?",
                    "options": [
                        "Bundling data and methods into a single unit and restricting access from outside",
                        "Grouping unrelated classes together",
                        "Separating the code into multiple modules",
                        "Writing all functions in a single file"
                    ],
                    "answer": 0,
                    "explanation": "Encapsulation involves combining data (attributes) and methods into a class and controlling access to protect sensitive information."
                },
                {
                    "question": "How do you define a private attribute in Python?",
                    "options": [
                        "Use the protected keyword",
                        "Add two underscores before its name",
                        "Use the private keyword",
                        "Add a single underscore before its name"
                    ],
                    "answer": 1,
                    "explanation": "Private attributes in Python are defined by prefixing the name with two underscores (e.g., __actual_pin)."
                },
                {
                    "question": "What is an abstract class in Python?",
                    "options": [
                        "A class that can only inherit from other classes",
                        "A class that can be instantiated directly",
                        "A class that defines rules (methods) for child classes",
                        "A class with only concrete methods"
                    ],
                    "answer": 2,
                    "explanation": "An abstract class defines a set of methods that child classes must implement and cannot be instantiated if it has abstract methods."
                }
            ],
            "codeTasks": [
                {
                    "question": "You need to create a system to handle different types of vehicles.\n\nFollow these exact steps:\n\n1. Import ABC and abstractmethod from the abc module.\n   - Write: `from abc import ABC, abstractmethod`\n\n2. Create an abstract class called Vehicle that inherits from ABC.\n\n3. In the Vehicle class, define an __init__() method with parameters `self`, `brand`, and `speed`.\n   - Inside __init__(), assign `self.brand = brand`.\n   - Make `speed` a private attribute by assigning it to `self.__speed = speed`.\n\n4. Define a method `get_speed(self)` inside Vehicle that returns `self.__speed`.\n\n5. Inside Vehicle, define an abstract method `fuel_type(self)` using the @abstractmethod decorator.\n\n6. Create a subclass Car that inherits from Vehicle.\n   - Implement `fuel_type(self)` to return the string `'Petrol'`.\n\n7. Create a subclass ElectricScooter that inherits from Vehicle.\n   - Implement `fuel_type(self)` to return the string `'Electric'`.\n\n8. Define a function called `create_vehicles()`.\n   - Inside this function, create an object `car` of type Car with brand `'Tesla'` and speed `120`.\n   - Create an object `scooter` of type ElectricScooter with brand `'Yamaha'` and speed `45`.\n   - Return a **single string using an f-string** in this exact format:\n     `f\"{car.brand},{car.get_speed()},{car.fuel_type()},{scooter.brand},{scooter.get_speed()},{scooter.fuel_type()}\"`\n   - Do not hardcode values like `'Tesla'` or `'Yamaha'`; use the object attributes and methods.\n   - Do not use print statements.\n\n9. The function `create_vehicles()` should be the only output of your code.",
                    "starterCode": "# Step 1: Import ABC and abstractmethod\n# Step 2: Define Vehicle class inheriting ABC\n# Step 3: Define __init__ with brand and speed (private)\n# Step 4: Define get_speed method\n# Step 5: Define abstract method fuel_type\n# Step 6: Define Car subclass and implement fuel_type\n# Step 7: Define ElectricScooter subclass and implement fuel_type\n# Step 8: Define create_vehicles() function and return the formatted string using object attributes and f-string",
                    "expectedOutput": "Tesla,120,Petrol,Yamaha,45,Electric",
                    "solutionCode": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    def __init__(self, brand, speed):\n        self.brand = brand\n        self.__speed = speed\n\n    def get_speed(self):\n        return self.__speed\n\n    @abstractmethod\n    def fuel_type(self):\n        pass\n\nclass Car(Vehicle):\n    def fuel_type(self):\n        return 'Petrol'\n\nclass ElectricScooter(Vehicle):\n    def fuel_type(self):\n        return 'Electric'\n\ndef create_vehicles():\n    car = Car('Tesla', 120)\n    scooter = ElectricScooter('Yamaha', 45)\n    return f\"{car.brand},{car.get_speed()},{car.fuel_type()},{scooter.brand},{scooter.get_speed()},{scooter.fuel_type()}\"",
                    "testCases": [
                        {
                            "mode": "function",
                            "call": {
                                "name": "create_vehicles",
                                "args": []
                            },
                            "expectedReturn": "Tesla,120,Petrol,Yamaha,45,Electric"
                        }
                    ],
                    "structureRequirements": {
                        "functions": [
                            "get_speed",
                            "fuel_type",
                            "create_vehicles"
                        ],
                        "mustUseForLoop": false,
                        "mustUseWhileLoop": false,
                        "forbidden": [
                            "eval(",
                            "exec("
                        ]
                    }
                }
            ]
        },
        {
            "name": "Modules and Packages",
            "description": "In this topic, students will learn how Python organizes code into modules and packages, and how built-in modules provide ready-made tools for common tasks. They will explore creating their own modules, grouping them into packages, and using built-in modules like random, time, datetime, and sys to write efficient programs.",
            "mcqs": [
                {
                    "question": "What is the main purpose of a Python module?",
                    "options": [
                        "To connect Python with databases",
                        "To reuse code by organizing it into a separate .py file",
                        "To automatically generate random numbers",
                        "To execute code faster"
                    ],
                    "answer": 1,
                    "explanation": "Modules allow us to organize and reuse code by storing it in separate .py files that can be imported into other programs."
                },
                {
                    "question": "Which file makes a folder behave like a package in Python?",
                    "options": [
                        "setup.py",
                        "main.py",
                        "__init__.py",
                        "package.py"
                    ],
                    "answer": 2,
                    "explanation": "The __init__.py file marks a folder as a Python package, allowing it to contain multiple modules."
                },
                {
                    "question": "Which function allows you to pause a Python program for a few seconds?",
                    "options": [
                        "time.sleep()",
                        "datetime.now()",
                        "sys.exit()",
                        "time.pause()"
                    ],
                    "answer": 0,
                    "explanation": "time.sleep(n) pauses the program for n seconds."
                },
                {
                    "question": "Which function generates a random integer between 10 and 20, inclusive?",
                    "options": [
                        "random.choice(10,20)",
                        "random.randint(10,20)",
                        "random.random(10,20)",
                        "random.uniform(10,20)"
                    ],
                    "answer": 1,
                    "explanation": "random.randint(10,20) generates a random integer between 10 and 20, both inclusive."
                }
            ],
            "codeTasks": [
                {
                    "question": "Write a program that simulates a lucky draw.\n\nFollow these steps carefully:\n\n1. Use the provided list of participants (do not modify this list):\n   `participants = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]`\n\n2. Import the required modules: `random` and `time`.\n\n3. Print the message 'Starting the lucky draw...' and pause the program for 3 seconds using `time.sleep()`.\n\n4. Randomly select one winner from the participants list using `random.choice()`.\n\n5. Print the winner in the format: 'The winner is: <name>', where `<name>` is the randomly selected participant.",
                    "starterCode": "# Step 1: Import modules\n\nparticipants = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\n\n# Step 2: Print starting message and pause\n\n# Step 3: Select a random winner\n\n# Step 4: Print the winner",
                    "solutionCode": "import random\nimport time\n\nparticipants = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\n\nprint('Starting the lucky draw...')\ntime.sleep(3)\n\nwinner = random.choice(participants)\nprint('The winner is:', winner)",
                    "expectedOutput": "Starting the lucky draw...\n(The program pauses for 3 seconds)\nThe winner is: <name>",
                    "testCases": [
                        {
                            "mode": "io",
                            "input": [],
                            "compare": "regex",
                            "expectedRegex": "The winner is:\\s*(Alice|Bob|Charlie|David|Eve)"
                        }
                    ],
                    "structureRequirements": {
                        "mustUseForLoop": false,
                        "mustUseWhileLoop": false,
                        "forbidden": [
                            "eval(",
                            "exec("
                        ],
                        "modules": [
                            "random",
                            "time"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Exception Handling",
            "description": "Understanding the difference between syntax errors and exceptions. Using try, except, else, and finally to handle exceptions gracefully, and learning to raise exceptions manually.",
            "mcqs": [
                {
                    "question": "In Python, what is the main purpose of a try-except block?",
                    "options": [
                        "The try block is for code that might raise exceptions; the except block handles the exceptions if they occur.",
                        "The try block runs only if an exception occurs; the except block runs only if no exception occurs.",
                        "The try block automatically fixes errors; the except block prints the error.",
                        "The try block is optional; the except block is mandatory for all code."
                    ],
                    "answer": 0,
                    "explanation": "The try block contains code that might raise exceptions. The except block is executed only if an exception occurs in the try block, allowing the program to handle errors gracefully.",
                    "topic": "Errors vs. Exceptions and Basic Handling"
                },
                {
                    "question": "Which keyword is used to define a block of code that will run only if no exception occurs in the try block, and which keyword defines a block that always runs regardless of exceptions?",
                    "options": [
                        "'else' runs if an exception occurs; 'finally' runs only if no exception occurs",
                        "'else' runs only if no exception occurs; 'finally' always runs regardless of exceptions",
                        "'finally' runs only if no exception occurs; 'else' always runs regardless of exceptions",
                        "'try' runs only if no exception occurs; 'except' always runs"
                    ],
                    "answer": 1,
                    "explanation": "The else block runs only if the try block does not raise an exception. The finally block always runs, regardless of exceptions.",
                    "topic": "Errors vs. Exceptions and Basic Handling"
                },
                {
                    "question": "What does the 'raise' keyword do in Python?",
                    "options": [
                        "It catches exceptions automatically.",
                        "It stops the program without an error.",
                        "It manually triggers an exception.",
                        "It prevents errors from occurring."
                    ],
                    "answer": 2,
                    "explanation": "The raise keyword allows the programmer to manually trigger an exception, often used for input validation or custom error handling.",
                    "topic": "Errors vs. Exceptions and Basic Handling"
                },
                {
                    "question": "Which of the following is a correct way to raise a ValueError when a user enters a negative number?",
                    "options": [
                        "raise NegativeNumberError('Negative number entered')",
                        "raise ValueError('Negative number entered')",
                        "raise Exception('Negative number entered')",
                        "raise InputError('Negative number entered')"
                    ],
                    "answer": 1,
                    "explanation": "ValueError is the built-in exception type used to indicate that a function received an argument of the correct type but an inappropriate value. Using raise ValueError(...) is correct.",
                    "topic": "Errors vs. Exceptions and Basic Handling"
                }
            ],
            "codeTasks": [
                {
                    "question": "Write a program that asks the user for their age and determines access based on the input.\n\nFollow these steps carefully:\n\n1. Start a try block using 'try:'.\n\n2. Inside the try block, ask the user to enter their age using input() and store it in a variable called age_input.\n\n3. Convert age_input to an integer and store it in a variable called age.\n\n4. Check if age is negative. If it is, raise a ValueError with the message 'Age cannot be negative.'\n\n5. Still inside the try block, check if age is 13 or older. If yes, print 'Access granted.' Otherwise, print 'Access denied.'\n\n6. Add an except block using 'except ValueError as ve:'. Inside it, print 'Invalid input: ' followed by the exception message.\n\nDo not change the exact printed messages. Your program must print exactly 'Access granted.', 'Access denied.', or 'Invalid input: <message>' as described.",
                    "starterCode": "# Step 1: Start your try-except block below",
                    "solutionCode": "try:\n    age_input = input('Enter your age: ')\n    age = int(age_input)\n    if age < 0:\n        raise ValueError('Age cannot be negative.')\n    if age >= 13:\n        print('Access granted.')\n    else:\n        print('Access denied.')\nexcept ValueError as ve:\n    print('Invalid input:', ve)",
                    "expectedOutput": "Example 1 Input: '12' → Output: 'Access denied.'\nExample 2 Input: '15' → Output: 'Access granted.'\nExample 3 Input: '-5' → Output: 'Invalid input: Age cannot be negative.'\nExample 4 Input: 'hello' → Output: 'Invalid input: invalid literal for int() with base 10: 'hello''",
                    "testCases": [
                        {
                            "mode": "io",
                            "input": [
                                "12"
                            ],
                            "expected": "Access denied."
                        },
                        {
                            "mode": "io",
                            "input": [
                                "15"
                            ],
                            "expected": "Access granted."
                        },
                        {
                            "mode": "io",
                            "input": [
                                "-5"
                            ],
                            "expected": "Invalid input: Age cannot be negative."
                        },
                        {
                            "mode": "io",
                            "input": [
                                "hello"
                            ],
                            "expected": "Invalid input: invalid literal for int() with base 10: 'hello'"
                        }
                    ],
                    "structureRequirements": {
                        "functions": [],
                        "mustUseForLoop": false,
                        "mustUseWhileLoop": false,
                        "mustUseTryExcept": true,
                        "mustUseRaise": true,
                        "forbidden": []
                    }
                }
            ]
        },
        {
            "name": "Turtle Graphics",
            "description": "Introduction to the turtle module in Python. Students will learn how to create a screen, control a turtle (pen), draw shapes, and handle user inputs using try-except and raise statements.",
            "mcqs": [
                {
                    "question": "What does the turtle module in Python allow you to do?",
                    "options": [
                        "Generate random numbers",
                        "Create graphical drawings by controlling a virtual pen",
                        "Add delays in program execution",
                        "Perform mathematical calculations faster"
                    ],
                    "answer": 1,
                    "explanation": "The turtle module provides a visual way to draw shapes and designs by controlling a virtual 'turtle' on the screen."
                },
                {
                    "question": "Which command is used to keep the turtle screen open until you close it manually?",
                    "options": [
                        "turtle.open()",
                        "screen.mainloop()",
                        "turtle.exit()",
                        "screen.keepopen()"
                    ],
                    "answer": 1,
                    "explanation": "screen.mainloop() keeps the turtle graphics window open until the user closes it manually."
                },
                {
                    "question": "By default, where does the turtle start on the screen when you create a new turtle using turtle.Turtle()?",
                    "options": [
                        "Top-left corner",
                        "Bottom-right corner",
                        "Center of the screen facing right (0 degrees)",
                        "Random position on the screen"
                    ],
                    "answer": 2,
                    "explanation": "When a new turtle is created, it starts at the center of the screen facing right, which is considered 0 degrees."
                },
                {
                    "question": "What does pen.forward(100) do?",
                    "options": [
                        "Turns the pen 100 degrees",
                        "Moves the pen forward by 100 units in the direction it is facing",
                        "Moves the pen to coordinate (100,100)",
                        "Sets the pen color to 100"
                    ],
                    "answer": 1,
                    "explanation": "pen.forward(100) moves the turtle forward by 100 units in the direction it is currently facing."
                },
                {
                    "question": "How do you turn the turtle clockwise by 90 degrees?",
                    "options": [
                        "pen.left(90)",
                        "pen.right(90)",
                        "pen.turn(90)",
                        "turtle.rotate(90)"
                    ],
                    "answer": 1,
                    "explanation": "pen.right(90) turns the turtle clockwise by 90 degrees."
                },
                {
                    "question": "If you want the turtle to draw a green line, which command would you use?",
                    "options": [
                        "pen.color('green')",
                        "turtle.penColor('green')",
                        "screen.color('green')",
                        "pen.setColor('green')"
                    ],
                    "answer": 0,
                    "explanation": "pen.color('green') sets the pen color to green, so any line drawn after this will appear in green."
                }
            ]
        }
    ]
}